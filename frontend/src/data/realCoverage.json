{
  "nodes": [
    {
      "nodeName": "ts-admin-user-service",
      "nodeType": "service",
      "codeCoveragePercentage": "100.0"
    },
    {
      "nodeName": "ts-consign-price-service",
      "nodeType": "service",
      "codeCoveragePercentage": "100.0"
    },
    {
      "nodeName": "ts-consign-service",
      "nodeType": "service",
      "codeCoveragePercentage": "100.0"
    },
    {
      "nodeName": "ts-train-service",
      "nodeType": "service",
      "codeCoveragePercentage": "100.0"
    },
    {
      "nodeName": "ts-route-service",
      "nodeType": "service",
      "codeCoveragePercentage": "100.0"
    },
    {
      "nodeName": "ts-admin-route-service",
      "nodeType": "service",
      "codeCoveragePercentage": "100.0"
    },
    {
      "nodeName": "ts-price-service",
      "nodeType": "service",
      "codeCoveragePercentage": "100.0"
    },
    {
      "nodeName": "ts-assurance-service",
      "nodeType": "service",
      "codeCoveragePercentage": "100.0"
    },
    {
      "nodeName": "ts-order-other-service",
      "nodeType": "service",
      "codeCoveragePercentage": "100.0"
    },
    {
      "nodeName": "ts-user-service",
      "nodeType": "service",
      "codeCoveragePercentage": "100.0"
    },
    {
      "nodeName": "ts-admin-basic-info-service",
      "nodeType": "service",
      "codeCoveragePercentage": "100.0"
    },
    {
      "nodeName": "ts-route-plan-service",
      "nodeType": "service",
      "codeCoveragePercentage": "100.0"
    },
    {
      "nodeName": "ts-food-service",
      "nodeType": "service",
      "codeCoveragePercentage": "100.0"
    },
    {
      "nodeName": "ts-preserve-service",
      "nodeType": "service",
      "codeCoveragePercentage": "100.0"
    },
    {
      "nodeName": "ts-payment-service",
      "nodeType": "service",
      "codeCoveragePercentage": "100.0"
    },
    {
      "nodeName": "ts-seat-service",
      "nodeType": "service",
      "codeCoveragePercentage": "100.0"
    },
    {
      "nodeName": "ts-travel-service",
      "nodeType": "service",
      "codeCoveragePercentage": "100.0"
    },
    {
      "nodeName": "ts-station-service",
      "nodeType": "service",
      "codeCoveragePercentage": "100.0"
    },
    {
      "nodeName": "ts-cancel-service",
      "nodeType": "service",
      "codeCoveragePercentage": "100.0"
    },
    {
      "nodeName": "ts-wait-order-service",
      "nodeType": "service",
      "codeCoveragePercentage": "100.0"
    },
    {
      "nodeName": "ts-security-service",
      "nodeType": "service",
      "codeCoveragePercentage": "100.0"
    },
    {
      "nodeName": "ts-admin-order-service",
      "nodeType": "service",
      "codeCoveragePercentage": "100.0"
    },
    {
      "nodeName": "ts-order-service",
      "nodeType": "service",
      "codeCoveragePercentage": "100.0"
    },
    {
      "nodeName": "ts-train-food-service",
      "nodeType": "service",
      "codeCoveragePercentage": "100.0"
    },
    {
      "nodeName": "ts-rebook-service",
      "nodeType": "service",
      "codeCoveragePercentage": "100.0"
    },
    {
      "nodeName": "ts-auth-service",
      "nodeType": "service",
      "codeCoveragePercentage": "100.0"
    },
    {
      "nodeName": "ts-travel-plan-service",
      "nodeType": "service",
      "codeCoveragePercentage": "100.0"
    },
    {
      "nodeName": "ts-preserve-other-service",
      "nodeType": "service",
      "codeCoveragePercentage": "100.0"
    },
    {
      "nodeName": "ts-inside-payment-service",
      "nodeType": "service",
      "codeCoveragePercentage": "100.0"
    },
    {
      "nodeName": "ts-station-food-service",
      "nodeType": "service",
      "codeCoveragePercentage": "100.0"
    },
    {
      "nodeName": "ts-basic-service",
      "nodeType": "service",
      "codeCoveragePercentage": "100.0"
    },
    {
      "nodeName": "ts-admin-travel-service",
      "nodeType": "service",
      "codeCoveragePercentage": "100.0"
    },
    {
      "nodeName": "ts-food-delivery-service",
      "nodeType": "service",
      "codeCoveragePercentage": "100.0"
    },
    {
      "nodeName": "ts-travel2-service",
      "nodeType": "service",
      "codeCoveragePercentage": "100.0"
    },
    {
      "nodeName": "ts-notification-service",
      "nodeType": "service",
      "codeCoveragePercentage": "100.0"
    },
    {
      "nodeName": "ts-config-service",
      "nodeType": "service",
      "codeCoveragePercentage": "100.0"
    },
    {
      "nodeName": "ts-contacts-service",
      "nodeType": "service",
      "codeCoveragePercentage": "100.0"
    }
  ],
  "links": [
    {
      "source": "ts-travel-plan-service",
      "target": "ts-seat-service",
      "requests": [
        {
          "type": "POST",
          "uri": "ts-seat-service/api/v1/seatservice/seats/left_tickets",
          "requestReturn": "org.springframework.http.HttpEntity",
          "endpointFunction": "seat.controller.SeatController.getLeftTicketOfInterval",
          "endpointMsName": "ts-seat-service",
          "targetEndpointUri": "/api/v1/seatservice/seats/left_tickets",
          "isCollection": false,
          "parentMethod": "travelplan.service.TravelPlanServiceImpl.getRestTicketNumber",
          "msName": "ts-travel-plan-service",
          "restCallInClassName": "travelplan.service.TravelPlanServiceImpl"
        }
      ]
    },
    {
      "source": "ts-wait-order-service",
      "target": "ts-preserve-service",
      "requests": [
        {
          "type": "POST",
          "uri": "/api/v1/contactservice/preserve",
          "requestReturn": "org.springframework.http.HttpEntity",
          "endpointFunction": "preserve.controller.PreserveController.preserve",
          "endpointMsName": "ts-preserve-service",
          "targetEndpointUri": "/api/v1/preserveservice/preserve",
          "isCollection": false,
          "parentMethod": "waitorder.utils.PollThread.doPreserve",
          "msName": "ts-wait-order-service",
          "restCallInClassName": "waitorder.utils.PollThread"
        }
      ]
    },
    {
      "source": "ts-preserve-service",
      "target": "ts-seat-service",
      "requests": [
        {
          "type": "POST",
          "uri": "ts-seat-service/api/v1/seatservice/seats",
          "requestReturn": "org.springframework.http.HttpEntity",
          "endpointFunction": "seat.controller.SeatController.create",
          "endpointMsName": "ts-seat-service",
          "targetEndpointUri": "/api/v1/seatservice/seats",
          "isCollection": false,
          "parentMethod": "preserve.service.PreserveServiceImpl.dipatchSeat",
          "msName": "ts-preserve-service",
          "restCallInClassName": "preserve.service.PreserveServiceImpl"
        }
      ]
    },
    {
      "source": "ts-preserve-service",
      "target": "ts-food-service",
      "requests": [
        {
          "type": "POST",
          "uri": "ts-food-service/api/v1/foodservice/orders",
          "requestReturn": "org.springframework.http.HttpEntity",
          "endpointFunction": "foodsearch.controller.FoodController.createFoodOrder",
          "endpointMsName": "ts-food-service",
          "targetEndpointUri": "/api/v1/foodservice/orders",
          "isCollection": false,
          "parentMethod": "preserve.service.PreserveServiceImpl.createFoodOrder",
          "msName": "ts-preserve-service",
          "restCallInClassName": "preserve.service.PreserveServiceImpl"
        }
      ]
    },
    {
      "source": "ts-travel2-service",
      "target": "ts-seat-service",
      "requests": [
        {
          "type": "POST",
          "uri": "ts-seat-service/api/v1/seatservice/seats/left_tickets",
          "requestReturn": "org.springframework.http.HttpEntity",
          "endpointFunction": "seat.controller.SeatController.getLeftTicketOfInterval",
          "endpointMsName": "ts-seat-service",
          "targetEndpointUri": "/api/v1/seatservice/seats/left_tickets",
          "isCollection": false,
          "parentMethod": "travel2.service.TravelServiceImpl.getRestTicketNumber",
          "msName": "ts-travel2-service",
          "restCallInClassName": "travel2.service.TravelServiceImpl"
        }
      ]
    },
    {
      "source": "ts-admin-travel-service",
      "target": "ts-auth-service",
      "requests": [
        {
          "type": "POST",
          "uri": "",
          "requestReturn": "org.springframework.http.HttpEntity",
          "endpointFunction": "auth.controller.AuthController.createDefaultUser",
          "endpointMsName": "ts-auth-service",
          "targetEndpointUri": "/api/v1/auth",
          "isCollection": false,
          "parentMethod": "admintravel.service.AdminTravelServiceImpl.addTravel",
          "msName": "ts-admin-travel-service",
          "restCallInClassName": "admintravel.service.AdminTravelServiceImpl"
        }
      ]
    },
    {
      "source": "ts-preserve-other-service",
      "target": "ts-food-service",
      "requests": [
        {
          "type": "POST",
          "uri": "ts-food-service/api/v1/foodservice/orders",
          "requestReturn": "org.springframework.http.HttpEntity",
          "endpointFunction": "foodsearch.controller.FoodController.createFoodOrder",
          "endpointMsName": "ts-food-service",
          "targetEndpointUri": "/api/v1/foodservice/orders",
          "isCollection": false,
          "parentMethod": "preserveOther.service.PreserveOtherServiceImpl.createFoodOrder",
          "msName": "ts-preserve-other-service",
          "restCallInClassName": "preserveOther.service.PreserveOtherServiceImpl"
        }
      ]
    },
    {
      "source": "ts-preserve-other-service",
      "target": "ts-seat-service",
      "requests": [
        {
          "type": "POST",
          "uri": "ts-seat-service/api/v1/seatservice/seats",
          "requestReturn": "org.springframework.http.HttpEntity",
          "endpointFunction": "seat.controller.SeatController.create",
          "endpointMsName": "ts-seat-service",
          "targetEndpointUri": "/api/v1/seatservice/seats",
          "isCollection": false,
          "parentMethod": "preserveOther.service.PreserveOtherServiceImpl.dipatchSeat",
          "msName": "ts-preserve-other-service",
          "restCallInClassName": "preserveOther.service.PreserveOtherServiceImpl"
        }
      ]
    },
    {
      "source": "ts-user-service",
      "target": "ts-auth-service",
      "requests": [
        {
          "type": "POST",
          "uri": "ts-auth-service/api/v1/auth",
          "requestReturn": "org.springframework.http.HttpEntity",
          "endpointFunction": "auth.controller.AuthController.createDefaultUser",
          "endpointMsName": "ts-auth-service",
          "targetEndpointUri": "/api/v1/auth",
          "isCollection": false,
          "parentMethod": "user.service.impl.UserServiceImpl.createDefaultAuthUser",
          "msName": "ts-user-service",
          "restCallInClassName": "user.service.impl.UserServiceImpl"
        }
      ]
    },
    {
      "source": "ts-travel-service",
      "target": "ts-seat-service",
      "requests": [
        {
          "type": "POST",
          "uri": "ts-seat-service/api/v1/seatservice/seats/left_tickets",
          "requestReturn": "org.springframework.http.HttpEntity",
          "endpointFunction": "seat.controller.SeatController.getLeftTicketOfInterval",
          "endpointMsName": "ts-seat-service",
          "targetEndpointUri": "/api/v1/seatservice/seats/left_tickets",
          "isCollection": false,
          "parentMethod": "travel.service.TravelServiceImpl.getRestTicketNumber",
          "msName": "ts-travel-service",
          "restCallInClassName": "travel.service.TravelServiceImpl"
        }
      ]
    },
    {
      "source": "ts-admin-user-service",
      "target": "ts-user-service",
      "requests": [
        {
          "type": "POST",
          "uri": "ts-user-service/api/v1/userservice/users/register",
          "requestReturn": "org.springframework.http.HttpEntity",
          "endpointFunction": "user.controller.UserController.registerUser",
          "endpointMsName": "ts-user-service",
          "targetEndpointUri": "/api/v1/userservice/users/register",
          "isCollection": false,
          "parentMethod": "adminuser.service.AdminUserServiceImpl.addUser",
          "msName": "ts-admin-user-service",
          "restCallInClassName": "adminuser.service.AdminUserServiceImpl"
        },
        {
          "type": "GET",
          "uri": "ts-user-service/api/v1/userservice/users",
          "requestReturn": "org.springframework.http.HttpEntity",
          "endpointFunction": "user.controller.UserController.getAllUser",
          "endpointMsName": "ts-user-service",
          "targetEndpointUri": "/api/v1/userservice/users",
          "isCollection": false,
          "parentMethod": "adminuser.service.AdminUserServiceImpl.getAllUsers",
          "msName": "ts-admin-user-service",
          "restCallInClassName": "adminuser.service.AdminUserServiceImpl"
        },
        {
          "type": "PUT",
          "uri": "ts-user-service/api/v1/userservice/users",
          "requestReturn": "org.springframework.http.HttpEntity",
          "endpointFunction": "user.controller.UserController.updateUser",
          "endpointMsName": "ts-user-service",
          "targetEndpointUri": "/api/v1/userservice/users",
          "isCollection": false,
          "parentMethod": "adminuser.service.AdminUserServiceImpl.updateUser",
          "msName": "ts-admin-user-service",
          "restCallInClassName": "adminuser.service.AdminUserServiceImpl"
        }
      ]
    },
    {
      "source": "ts-inside-payment-service",
      "target": "ts-auth-service",
      "requests": [
        {
          "type": "GET",
          "uri": "http://rest-service-external:16100/greet",
          "requestReturn": "java.lang.Boolean",
          "endpointFunction": "auth.controller.UserController.getAllUser",
          "endpointMsName": "ts-auth-service",
          "targetEndpointUri": "/api/v1/users",
          "isCollection": false,
          "parentMethod": "inside_payment.async.AsyncTask.sendAsyncCallToPaymentService",
          "msName": "ts-inside-payment-service",
          "restCallInClassName": "inside_payment.async.AsyncTask"
        },
        {
          "type": "GET",
          "uri": "",
          "requestReturn": "org.springframework.http.HttpEntity",
          "endpointFunction": "auth.controller.UserController.getAllUser",
          "endpointMsName": "ts-auth-service",
          "targetEndpointUri": "/api/v1/users",
          "isCollection": false,
          "parentMethod": "inside_payment.service.InsidePaymentServiceImpl.pay",
          "msName": "ts-inside-payment-service",
          "restCallInClassName": "inside_payment.service.InsidePaymentServiceImpl"
        }
      ]
    },
    {
      "source": "ts-rebook-service",
      "target": "ts-auth-service",
      "requests": [
        {
          "type": "GET",
          "uri": "",
          "requestReturn": "org.springframework.http.HttpEntity",
          "endpointFunction": "auth.controller.UserController.getAllUser",
          "endpointMsName": "ts-auth-service",
          "targetEndpointUri": "/api/v1/users",
          "isCollection": false,
          "parentMethod": "rebook.service.RebookServiceImpl.getOrderByRebookInfo",
          "msName": "ts-rebook-service",
          "restCallInClassName": "rebook.service.RebookServiceImpl"
        },
        {
          "type": "POST",
          "uri": "",
          "requestReturn": "org.springframework.http.HttpEntity",
          "endpointFunction": "auth.controller.AuthController.createDefaultUser",
          "endpointMsName": "ts-auth-service",
          "targetEndpointUri": "/api/v1/auth",
          "isCollection": false,
          "parentMethod": "rebook.service.RebookServiceImpl.createOrder",
          "msName": "ts-rebook-service",
          "restCallInClassName": "rebook.service.RebookServiceImpl"
        },
        {
          "type": "POST",
          "uri": "",
          "requestReturn": "org.springframework.http.HttpEntity",
          "endpointFunction": "auth.controller.AuthController.createDefaultUser",
          "endpointMsName": "ts-auth-service",
          "targetEndpointUri": "/api/v1/auth",
          "isCollection": false,
          "parentMethod": "rebook.service.RebookServiceImpl.getTripAllDetailInformation",
          "msName": "ts-rebook-service",
          "restCallInClassName": "rebook.service.RebookServiceImpl"
        },
        {
          "type": "POST",
          "uri": "",
          "requestReturn": "org.springframework.http.HttpEntity",
          "endpointFunction": "auth.controller.AuthController.createDefaultUser",
          "endpointMsName": "ts-auth-service",
          "targetEndpointUri": "/api/v1/auth",
          "isCollection": false,
          "parentMethod": "rebook.service.RebookServiceImpl.deleteOrder",
          "msName": "ts-rebook-service",
          "restCallInClassName": "rebook.service.RebookServiceImpl"
        }
      ]
    },
    {
      "source": "ts-rebook-service",
      "target": "ts-seat-service",
      "requests": [
        {
          "type": "POST",
          "uri": "ts-seat-service/api/v1/seatservice/seats",
          "requestReturn": "org.springframework.http.HttpEntity",
          "endpointFunction": "seat.controller.SeatController.create",
          "endpointMsName": "ts-seat-service",
          "targetEndpointUri": "/api/v1/seatservice/seats",
          "isCollection": false,
          "parentMethod": "rebook.service.RebookServiceImpl.dipatchSeat",
          "msName": "ts-rebook-service",
          "restCallInClassName": "rebook.service.RebookServiceImpl"
        }
      ]
    },
    {
      "source": "ts-route-plan-service",
      "target": "ts-auth-service",
      "requests": [
        {
          "type": "GET",
          "uri": "",
          "requestReturn": "org.springframework.http.HttpEntity",
          "endpointFunction": "auth.controller.UserController.getAllUser",
          "endpointMsName": "ts-auth-service",
          "targetEndpointUri": "/api/v1/users",
          "isCollection": false,
          "parentMethod": "plan.service.RoutePlanServiceImpl.getStationList",
          "msName": "ts-route-plan-service",
          "restCallInClassName": "plan.service.RoutePlanServiceImpl"
        },
        {
          "type": "POST",
          "uri": "",
          "requestReturn": "org.springframework.http.HttpEntity",
          "endpointFunction": "auth.controller.AuthController.createDefaultUser",
          "endpointMsName": "ts-auth-service",
          "targetEndpointUri": "/api/v1/auth",
          "isCollection": false,
          "parentMethod": "plan.service.RoutePlanServiceImpl.searchMinStopStations",
          "msName": "ts-route-plan-service",
          "restCallInClassName": "plan.service.RoutePlanServiceImpl"
        }
      ]
    }
  ]
}